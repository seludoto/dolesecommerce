# Generated by Django 5.2.5 on 2025-08-24 19:38

from django.db import migrations, models


def remove_index_if_exists(apps, schema_editor):
    """Remove index if it exists, ignore if it doesn't"""
    try:
        with schema_editor.connection.cursor() as cursor:
            cursor.execute("DROP INDEX IF EXISTS payments_pa_pi_paym_c19a91_idx")
    except Exception:
        pass  # Ignore if index doesn't exist


def remove_pi_payment_index_if_exists(apps, schema_editor):
    """Remove pi_payment_id index if it exists"""
    try:
        with schema_editor.connection.cursor() as cursor:
            cursor.execute("DROP INDEX IF EXISTS payments_pa_pi_paym_2c5c4f_idx")
    except Exception:
        pass  # Ignore if index doesn't exist


class Migration(migrations.Migration):

    dependencies = [
        ('payments', '0006_create_missing_phone_tables'),
    ]

    operations = [
        # Remove indexes first with custom functions
        migrations.RunPython(remove_index_if_exists, migrations.RunPython.noop),
        migrations.RunPython(remove_pi_payment_index_if_exists, migrations.RunPython.noop),
        
        # Drop tables using SQL to avoid foreign key issues
        migrations.RunSQL(
            "DROP TABLE IF EXISTS payments_picoinrate;",
            migrations.RunSQL.noop
        ),
        migrations.RunSQL(
            "DROP TABLE IF EXISTS payments_pipaymenttransaction;",
            migrations.RunSQL.noop
        ),
        
        # Remove Pi-related fields from Payment model
        migrations.RunSQL(
            """
            CREATE TABLE payments_payment_new (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                amount DECIMAL(10,2) NOT NULL,
                payment_method VARCHAR(50) NOT NULL,
                payment_id VARCHAR(100) NOT NULL,
                status VARCHAR(20) NOT NULL DEFAULT 'pending',
                created_at DATETIME NOT NULL,
                updated_at DATETIME NOT NULL,
                gateway_response TEXT NOT NULL,
                failure_reason TEXT NOT NULL,
                order_id INTEGER NOT NULL,
                processed_by_id INTEGER,
                FOREIGN KEY (order_id) REFERENCES orders_order(id),
                FOREIGN KEY (processed_by_id) REFERENCES auth_user(id)
            );
            """,
            migrations.RunSQL.noop
        ),
        
        migrations.RunSQL(
            """
            INSERT INTO payments_payment_new (
                id, amount, payment_method, payment_id, status, 
                created_at, updated_at, gateway_response, failure_reason, 
                order_id, processed_by_id
            )
            SELECT 
                id, amount, payment_method, payment_id, status,
                created_at, updated_at, 
                COALESCE(gateway_response, '') as gateway_response,
                COALESCE(failure_reason, '') as failure_reason,
                order_id, processed_by_id
            FROM payments_payment 
            WHERE payment_method != 'pi_coin';
            """,
            migrations.RunSQL.noop
        ),
        
        migrations.RunSQL(
            "DROP TABLE payments_payment;",
            migrations.RunSQL.noop
        ),
        
        migrations.RunSQL(
            "ALTER TABLE payments_payment_new RENAME TO payments_payment;",
            migrations.RunSQL.noop
        ),
        
        # Recreate indexes
        migrations.RunSQL(
            "CREATE INDEX payments_pa_payment_b0147c_idx ON payments_payment (payment_method, status);",
            migrations.RunSQL.noop
        ),
        migrations.RunSQL(
            "CREATE INDEX payments_pa_created_7a6684_idx ON payments_payment (created_at);",
            migrations.RunSQL.noop
        ),
    ]
